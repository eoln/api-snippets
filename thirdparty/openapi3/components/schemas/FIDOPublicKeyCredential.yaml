title: FIDOPublicKeyCredential
type: object
description: |
  An object sent in a `PUT /consents/{ID}` request.
  Based on https://w3c.github.io/webauthn/#iface-pkcredential
  and mostly on: https://webauthn.guide/#registration
  AuthenticatorAttestationResponse
  https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject
properties:
  id:
    type: string
    description: |
      credential id: identifier of pair of keys, base64 encoded
      https://w3c.github.io/webauthn/#ref-for-dom-credential-id
  response:
    type: object
    description: |
      AuthenticatorAttestationResponse
    properties:
      clientData:
        type: object
        description: |
          parsed AuthenticatorAttestationResponse.clientDataJSON
          client data used to create credential
          https://webauthn.guide/#registration
        properties:
          challenge:
            type: string
            description: the challenge used to create credential
          origin:
            type: string
            description: the origin used to create credential
          type:
            type: string
            enum:
              - webauthn.create
            description: |
               If another string is provided, it indicates that the authenticator performed an incorrect operation.
               In such case OpenAPI framework will send back the status 400 
        required: 
          - challenge
          - origin
          - type
        additionalProperties: false
      attestation: 
        type: object
        description: |
          CBOR.Decoded AuthenticatorAttestationResponse.attestationObject
          https://webauthn.guide/#registration
        properties:
          authData: 
            type: string
            description: |
              base64 encoded byte array Uint8Array(196) with publicKey and metadata
              parsing example can be found here:
              https://webauthn.guide/#registration
            minLength: 196
            maxLength: 392
          format:
            type: string
            description: |
              attestation statement format
              Authenticators can provide attestation data in a number of ways; this indicates how the server should parse and validate the attestation data
              https://webauthn.guide/#registration
            enum:
              # we only accept FIDO flow
              # list of allowed formats: https://www.iana.org/assignments/webauthn/webauthn.xhtml
              # - packed
              # - tpm
              # - android-key
              # - andorid-safetynet
              - fido-u2f  
          statement:
            type: object
            description: |
              The FIDO statement format when `format: 'fido-u2f'` only!
              It can differ when other format types are enabled!
            properties:
              sig:
                type: string
                description: |
                  signature
                  base64 encoded Uint8Array(70)
                minLength: 70
                maxLength: 140
              x5c:
                type: string
                description: |
                  attestation certificate in X.509 format
                minLength: 1
                maxLength: 4096 # TODO: check how big this string could be.... 
            required:
              - sig
              - x5c
            additionalProperties: false
    required:
      - clientData
      - attestation
    additionalProperties: false
required:
  - id
  - response
additionalProperties: false
